#version 330 core
uniform mat4 MVP;
uniform mat4 modelMatrix;
uniform vec2 texRatio = vec2 (1,1);
uniform vec3 cameraPosition;
uniform float time;

layout(location=0) in vec3 vertexPositions;
layout(location=2) in vec2 vertexUVs;
layout(location=3) in vec3 vertexNormals;

out vec4 clipSpace;
out vec2 texCoords;
out vec3 vertexToCamera;
out vec3 worldPositionVertex;

#define PI 3.14159

void main()
{
	float radX = (vertexPositions.x * 0.08 + time * 0.2 ) * 2.0 * PI;
	float radZ = (vertexPositions.z * 0.08 + time * 0.2 ) * 2.0 * PI;
	
	
	float y = (cos(radX) + sin(radZ)) * 0.5;
	vec4 pos4 = vec4 (vertexPositions.x, y, vertexPositions.z, 1.0);
	
	clipSpace = MVP * pos4;
	gl_Position = clipSpace;
	
	vec4 world = modelMatrix * pos4;
	vertexToCamera = cameraPosition - world.xyz;
	
	worldPositionVertex = world.xyz;
	
	texCoords = vec2 (vertexUVs.x / 2.0 + 0.5 , vertexUVs.y / 2.0 + 0.5 ) * texRatio;
}